{"version":3,"file":"static/js/186.a5a0faf2.chunk.js","mappings":"2MAmBA,EAhBkB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,SACGG,EAAMK,SAFFL,EAAME,GADA,KAStB,C,wJCaD,EA3BmB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACpB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAUjB,OACE,kBAAMC,SATa,SAAAC,GACnBA,EAAEC,iBACFJ,EAAS,iBAAD,OAAkBF,IAE1BF,EAASE,EAAMO,eACfN,EAAS,GACV,EAGC,WACE,kBACEO,KAAK,OACLC,KAAK,QACLC,WAAS,EACTC,MAAOX,EACPY,SAAU,SAAAP,GAAC,OAAIJ,EAASI,EAAEQ,OAAOF,MAAtB,EACXG,YAAY,2BAEd,mBAAQN,KAAK,SAAb,sBAGL,EC6BD,EAlDe,WACb,OAAwCT,EAAAA,EAAAA,UAAS,IAAjD,eAAOgB,EAAP,KAAqBC,EAArB,KACMd,GAAWC,EAAAA,EAAAA,MAMXc,EAAY,mCAAG,WAAMC,GAAN,iGAEGC,EAAAA,EAAAA,IAAkBD,GAFrB,OAEX1B,EAFW,OAGjBwB,EAAgBxB,GAHC,gDAKjB4B,QAAQC,MAAR,MALiB,yDAAH,sDAkClB,OACE,4BACE,SAAC,EAAD,CAAYvB,SAAUmB,KACtB,SAACK,EAAA,EAAD,CAAWlC,OAAQ2B,EAAcQ,aA5BZ,SAACC,GACxBtB,EAAS,WAAD,OAAYsB,GACrB,MA6BF,C,+LCrDDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAEMC,EAAS,CACbA,OAAQ,CACNC,QAJY,mCAKZC,SAAU,UAIDC,EAAkB,mCAAG,6GAEPJ,EAAAA,EAAAA,IAAA,qBAAgCC,GAFzB,cAExBI,EAFwB,yBAGvBA,EAASC,KAAKC,SAHS,oGAAH,qDASlBb,EAAiB,mCAAG,WAAMD,GAAN,gGAENO,EAAAA,EAAAA,IAAA,6BAAgCP,GAAaQ,GAFvC,cAEvBI,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,oGAAH,sDASjBC,EAAiB,mCAAG,WAAMT,GAAN,gGAENC,EAAAA,EAAAA,IAAA,gBAAmBD,GAAWE,GAFxB,cAEvBI,EAFuB,yBAGtBA,EAASC,MAHa,oGAAH,sDASjBG,EAAc,mCAAG,WAAMV,GAAN,gGAEHC,EAAAA,EAAAA,IAAA,gBAAmBD,EAAnB,YAAsCE,GAFnC,cAEpBI,EAFoB,yBAGnBA,EAASC,KAAKI,MAHK,oGAAH,sDASdC,EAAiB,mCAAG,WAAMZ,GAAN,gGAENC,EAAAA,EAAAA,IAAA,gBAAmBD,EAAnB,YAAsCE,GAFhC,cAEvBI,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,oGAAH,qD","sources":["components/MovieList/MovieList.js","components/SearchForm/SearchForm.js","pages/Movies.js","service/api.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst SearchForm = ({ onSearch }) => {\n  const [query, setQuery] = useState('');\n  const navigate = useNavigate();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    navigate(`/movies?query=${query}`);\n\n    onSearch(query.toLowerCase());\n    setQuery('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={query}\n        onChange={e => setQuery(e.target.value)}\n        placeholder=\"enter the movie title\"\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import { useState } from 'react';\n// import { useSearchParams } from 'react-router-dom';\nimport { handleSearchMovie } from 'service/api';\nimport MovieList from 'components/MovieList';\nimport SearchForm from 'components/SearchForm';\nimport { useNavigate } from 'react-router-dom';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const navigate = useNavigate();\n\n  // const [searchParams, setSearchParams] = useSearchParams();\n  // const movieName = searchParams.get('query') ?? '';\n\n  // useEffect(() => {\n  const handleSearch = async movieName => {\n    try {\n      const movie = await handleSearchMovie(movieName);\n      setSearchMovies(movie);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleMovieClick = (movieId) => {\n    navigate(`/movies/${movieId}`);\n  }\n\n  // searchMovieData();\n  // }, []);\n\n  // state, isLoading, errors\n\n  // const updQueryString = e => {\n  //   const movieIdValue = e.target.value;\n  //   if (movieIdValue === '') {\n  //     return setSearchParams({});\n  //   }\n  //   setSearchParams({ movieId: movieIdValue });\n  // };\n  // const handleSubmit = value => {\n  //   setSearchParams({ query: value });\n  // };\n\n  // const updQueryString = query => {\n  //   const nextParams = query !== '' && { query };\n  //   setSearchParams(nextParams);\n  // };\n\n  return (\n    <div>\n      <SearchForm onSearch={handleSearch} />\n      <MovieList movies={searchMovies} onMovieClick={handleMovieClick} />\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '59d71211f829907de44c68d945469335';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const fetchTrendingMovie = async () => {\n  try {\n    const response = await axios.get(`trending/movie/day`, params);\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const handleSearchMovie = async movieName => {\n  try {\n    const response = await axios.get(`search/movie?query=${movieName}`, params);\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}`, params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/credits`, params);\n    return response.data.cast;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/reviews`, params);\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["movies","location","useLocation","map","movie","to","id","state","from","title","onSearch","useState","query","setQuery","navigate","useNavigate","onSubmit","e","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","placeholder","searchMovies","setSearchMovies","handleSearch","movieName","handleSearchMovie","console","error","MovieList","onMovieClick","movieId","axios","params","api_key","language","fetchTrendingMovie","response","data","results","fetchMovieDetails","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}