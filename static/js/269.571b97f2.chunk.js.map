{"version":3,"file":"static/js/269.571b97f2.chunk.js","mappings":"wRAEaA,EAAmBC,EAAAA,EAAAA,IAAH,6HAQhBC,EAAcD,EAAAA,EAAAA,GAAH,+GAOXE,EAAcF,EAAAA,EAAAA,EAAH,0CAIXG,EAAYH,EAAAA,EAAAA,GAAH,6E,mBCqCtB,EA/CgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAL,CAEA,IAAMQ,EAAqB,mCAAG,2FAC5BF,GAAa,GADe,mBAIJG,EAAAA,EAAAA,IAAkBT,GAJd,OAIpBG,EAJoB,OAK1BC,EAAWD,GALe,gDAO1BO,QAAQC,MAAR,MAP0B,yBAS1BL,GAAa,GATa,4EAAH,qDAa3BE,GAfoB,CAgBrB,GAAE,CAACR,KAGF,UAACL,EAAD,WACGU,IAAa,SAACO,EAAA,EAAD,KAEd,wBAAI,aACJ,wBACGT,EAAQU,OAAS,EAChBV,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,UAACpB,EAAD,YACE,SAACC,EAAD,WACE,yBAAG,WAASkB,QAEd,SAAClB,EAAD,UAAcmB,MAJEF,EADR,KASZ,SAAChB,EAAD,UAAW,kDAKpB,C,mMCtDDmB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAEMC,EAAS,CACbA,OAAQ,CACNC,QAJY,mCAKZC,SAAU,UAIDC,EAAkB,mCAAG,6GAEPJ,EAAAA,EAAAA,IAAA,qBAAgCC,GAFzB,cAExBI,EAFwB,yBAGvBA,EAASC,KAAKC,SAHS,oGAAH,qDASlBC,EAAiB,mCAAG,WAAMC,GAAN,gGAENT,EAAAA,EAAAA,IAAA,6BAAgCS,GAAaR,GAFvC,cAEvBI,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,oGAAH,sDASjBG,EAAiB,mCAAG,WAAM5B,GAAN,gGAENkB,EAAAA,EAAAA,IAAA,gBAAmBlB,GAAWmB,GAFxB,cAEvBI,EAFuB,yBAGtBA,EAASC,MAHa,oGAAH,sDASjBK,EAAc,mCAAG,WAAM7B,GAAN,gGAEHkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,YAAsCmB,GAFnC,cAEpBI,EAFoB,yBAGnBA,EAASC,KAAKM,MAHK,oGAAH,sDASdrB,EAAiB,mCAAG,WAAMT,GAAN,gGAENkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,YAAsCmB,GAFhC,cAEvBI,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,oGAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","service/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContainerReviews = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  padding: 30px;\n`;\n\nexport const ReviewsItem = styled.li`\n  margin: 10px 0;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n`;\n\nexport const ReviewsText = styled.p`\n  margin: 5px 0;\n`;\n\nexport const NoReviews = styled.li`\n  text-align: center;\n  background-color: #f9f9f9;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'service/api';\nimport {\n  ContainerReviews,\n  ReviewsItem,\n  ReviewsText,\n  NoReviews,\n} from './Reviews.styled';\nimport Loader from 'components/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMovieReviewsData = async () => {\n      setIsLoading(true);\n\n      try {\n        const reviews = await fetchMovieReviews(movieId);\n        setReviews(reviews);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieReviewsData();\n  }, [movieId]);\n\n  return (\n    <ContainerReviews>\n      {isLoading && <Loader />}\n\n      <h2>Reviews</h2>\n      <ul>\n        {reviews.length > 0 ? (\n          reviews.map(({ id, author, content }) => (\n            <ReviewsItem key={id}>\n              <ReviewsText>\n                <b>Author: {author}</b>\n              </ReviewsText>\n              <ReviewsText>{content}</ReviewsText>\n            </ReviewsItem>\n          ))\n        ) : (\n          <NoReviews>We don't have any reviews for this movie.</NoReviews>\n        )}\n      </ul>\n    </ContainerReviews>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '59d71211f829907de44c68d945469335';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const fetchTrendingMovie = async () => {\n  try {\n    const response = await axios.get(`trending/movie/day`, params);\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const handleSearchMovie = async movieName => {\n  try {\n    const response = await axios.get(`search/movie?query=${movieName}`, params);\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}`, params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/credits`, params);\n    return response.data.cast;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/reviews`, params);\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["ContainerReviews","styled","ReviewsItem","ReviewsText","NoReviews","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","fetchMovieReviewsData","fetchMovieReviews","console","error","Loader","length","map","id","author","content","axios","params","api_key","language","fetchTrendingMovie","response","data","results","handleSearchMovie","movieName","fetchMovieDetails","fetchMovieCast","cast"],"sourceRoot":""}