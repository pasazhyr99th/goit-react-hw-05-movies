{"version":3,"file":"static/js/847.72247fff.chunk.js","mappings":"iOAqGA,UAjGqB,WAAO,IAAD,IACzB,GAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,MAE3DC,EAAAA,EAAAA,YAAU,WACR,GAAKR,EAAL,CAEA,IAAMS,EAAqB,mCAAG,8GAEJC,EAAAA,EAAAA,IAAkBV,GAFd,OAEpBW,EAFoB,OAG1BZ,EAAaY,GAHa,gDAK1BC,QAAQC,MAAR,MAL0B,yDAAH,qDAS3BJ,GAXoB,CAYrB,GAAE,CAACT,IAEJ,MAQIF,GAAa,CAAC,EAPhBgB,EADF,EACEA,YACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACAC,EAJF,EAIEA,aACAC,EALF,EAKEA,SACAC,EANF,EAMEA,OACAC,EAPF,EAOEA,eAMF,OACE,iCACE,SAAC,KAAD,CAAMC,GAAIjB,EAAoBkB,QAA9B,UACE,mBAAQC,KAAK,SAAb,qCAEF,0BACGP,EADH,IACWC,GAAY,WAAQA,EAAaO,UAAU,EAAG,GAAlC,SAEvB,gBACEC,IACEX,EAAW,0CAC4BA,GAb7C,8EAgBIY,IAAKN,EACLO,MAAO,OAET,oCAAYZ,MACZ,sCAAcG,MACd,2CAAYC,QAAZ,IAAYA,OAAZ,EAAYA,EAAQS,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,UA6BlD,2BACE,yBACE,SAAC,KAAD,CAAMV,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,EAAAW,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,+LCjGDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAEMC,EAAS,CACbA,OAAQ,CACNC,QAJY,mCAKZC,SAAU,UAIDC,EAAkB,mCAAG,6GAEPJ,EAAAA,EAAAA,IAAA,qBAAgCC,GAFzB,cAExBI,EAFwB,yBAGvBA,EAASC,KAAKC,SAHS,oGAAH,qDASlBC,EAAiB,mCAAG,WAAMC,GAAN,gGAENT,EAAAA,EAAAA,IAAA,6BAAgCS,GAAaR,GAFvC,cAEvBI,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,oGAAH,sDASjB/B,EAAiB,mCAAG,WAAMV,GAAN,gGAENkC,EAAAA,EAAAA,IAAA,gBAAmBlC,GAAWmC,GAFxB,cAEvBI,EAFuB,yBAGtBA,EAASC,MAHa,oGAAH,sDASjBI,EAAc,mCAAG,WAAM5C,GAAN,gGAEHkC,EAAAA,EAAAA,IAAA,gBAAmBlC,EAAnB,YAAsCmC,GAFnC,cAEpBI,EAFoB,yBAGnBA,EAASC,KAAKK,MAHK,oGAAH,sDASdC,EAAiB,mCAAG,WAAM9C,GAAN,gGAENkC,EAAAA,EAAAA,IAAA,gBAAmBlC,EAAnB,YAAsCmC,GAFhC,cAEvBI,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,oGAAH,qD","sources":["pages/MovieDetails.js","service/api.js"],"sourcesContent":["import React, { useEffect, useRef, Suspense, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovieDetails } from 'service/api';\n\nconst MovieDetails = () => {\n  const [movieData, setMovieData] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMovieDetailsData = async () => {\n      try {\n        const details = await fetchMovieDetails(movieId);\n        setMovieData(details);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovieDetailsData();\n  }, [movieId]);\n\n  const {\n    poster_path,\n    vote_average,\n    title,\n    release_date,\n    overview,\n    genres,\n    original_title,\n  } = movieData || {};\n\n  const defaultImgURL =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  return (\n    <>\n      <Link to={backLinkLocationRef.current}>\n        <button type=\"button\">⬅️ Go back</button>\n      </Link>\n      <h1>\n        {title} {release_date && `(${release_date.substring(0, 4)})`}\n      </h1>\n      <img\n        src={\n          poster_path\n            ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n            : defaultImgURL\n        }\n        alt={original_title}\n        width={250}\n      />\n      <p>Rating: {vote_average}</p>\n      <p>Overview: {overview}</p>\n      <p>Genres: {genres?.map(genre => genre.name).join(', ')}</p>\n      {/* {movieData && (\n        <div>\n          <img\n            width=\"300px\"\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n            }\n            alt={original_title}\n          />\n          <div>\n            <h1>\n              {title} ({release_date.slice(0, 4)})\n            </h1>\n            <p>User score: {popularity}</p>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n            <h2>Genres</h2>\n            <ul>\n              {genres.map(genre => (\n                <li key={genre.id}>{genre.name}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )} */}\n\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '59d71211f829907de44c68d945469335';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const fetchTrendingMovie = async () => {\n  try {\n    const response = await axios.get(`trending/movie/day`, params);\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const handleSearchMovie = async movieName => {\n  try {\n    const response = await axios.get(`search/movie?query=${movieName}`, params);\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}`, params);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/credits`, params);\n    return response.data.cast;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/reviews`, params);\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["useState","movieData","setMovieData","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","fetchMovieDetailsData","fetchMovieDetails","details","console","error","poster_path","vote_average","title","release_date","overview","genres","original_title","to","current","type","substring","src","alt","width","map","genre","name","join","Suspense","fallback","axios","params","api_key","language","fetchTrendingMovie","response","data","results","handleSearchMovie","movieName","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}